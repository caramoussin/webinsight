# Project Rules

- NEVER try to fix markdown lint errors.

## Documentation Structure

The documentation resides in the `documentation/` folder, containing required core files and optional context files, all in Markdown format. Files follow a hierarchical structure, with `requirements.md` defining requirements and `technical-specs.md`/`architecture.md` providing specifications:

```mermaid
flowchart TD
    PO[project-overview.md] --> RQ[requirements.md]
    PO --> AR[architecture.md]
    PO --> TS[technical-specs.md]
    
    RQ --> WIP[work-in-progress.md]
    AR --> WIP
    TS --> WIP
    
    WIP --> ST[status.md]
```

### Core Files (Required)

1. `project-overview.md`

   - The foundational document summarizing the project’s scope, goals, and core context.
   - Created at project start if absent, using the existing documentation pattern (e.g., headers, tone, structure) or improving clarity while maintaining consistency.
   - Acts as the source of truth, linking to `requirements.md` (requirements) and `technical-specs.md`/`architecture.md` (specifications).

2. `requirements.md` **(Requirements)**

   - Defines the project’s requirements: why it exists, problems it solves, user experience goals, and high-level functionality.
   - Captures the "what" and "why" from a user and business perspective (e.g., user needs, features, success criteria).
   - Mirrors the style and depth of existing documentation (e.g., user story format, feature lists), enhancing clarity or structure while staying consistent with the established pattern.

3. `work-in-progress.md`

   - Tracks current work focus, recent changes, next steps, and active decisions, bridging requirements and specifications.
   - Adheres to the existing format (e.g., bullet points, decision logs) and improves conciseness or organization while maintaining consistency.

4. `architecture.md` **(Specifications - Architecture)**

   - Specifies the system’s architecture: design patterns, key technical decisions, component relationships, and system structure.
   - Part of the technical specifications, detailing "how" the requirements are implemented at an architectural level.
   - Follows the technical style of existing documentation (e.g., Mermaid diagrams, technical terminology), refining explanations or visuals for clarity while preserving the established structure.

5. `technical-specs.md` **(Specifications - Technical Foundation)**

   - Specifies the technical foundation: technologies used, development setup, dependencies, and constraints.
   - Complements `architecture.md` to form complete technical specifications for meeting the requirements.
   - Matches the existing format (e.g., tables, lists) and enhances precision or updates outdated information while maintaining consistency.

6. `status.md`

   - Summarizes implementation status: what works, tasks remaining, current state, and known issues.
   - Tracks progress toward meeting requirements and adhering to specifications.
   - Aligns with the existing progress tracking style (e.g., task lists, issue tables), improving specificity or readability without altering the core approach.

### Additional Context

- Create additional files or subfolders within `documentation/` (e.g., `documentation/features/`, `documentation/api/`) for:
  - Detailed requirements (e.g., feature-specific user needs).
  - Detailed specifications (e.g., API contracts, integration details).
  - Testing strategies, deployment procedures, or other supporting documentation.
- New files **MUST** follow the tone, structure, and style of existing documentation, categorized as requirements (user-focused) or specifications (technical) where applicable, with improvements to clarity or organization that remain consistent with the established pattern.

## Core Workflows

### Ask Mode

```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Documentation and .windsurfrules]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

- **Read Documentation and .windsurfrules**: Use the Indexing Engine to analyze all files in `documentation/` and rules in `.windsurfrules` to understand project context.
- **Check Files**: If core files (`project-overview.md`, `requirements.md`, etc.) are missing, propose creating them based on existing documentation patterns, using Cascade’s documentation generation capabilities.
- **Plan and Present**: Develop a strategy aligned with the documentation style (requirements in `requirements.md`, specifications in `technical-specs.md`/`architecture.md`) and `.windsurfrules`, presenting it for developer approval via chat or comments.

### Write Mode

```mermaid
flowchart TD
    Start[Start] --> Context[Check Documentation and .windsurfrules]
    Context --> Update[Update Documentation]
    Update --> Rules[Update .windsurfrules if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes]
```

- **Check Documentation and .windsurfrules**: Use the Indexing Engine to read all `documentation/` files and `.windsurfrules` to establish context.
- **Update Documentation**: Document changes in appropriate files (e.g., `work-in-progress.md`, `status.md`), mimicking the existing style and suggesting improvements (e.g., clearer headings, better examples) for developer review.
- **Update .windsurfrules**: Modify `.windsurfrules` if new patterns emerge, ensuring consistency with existing rules and format.
- **Execute Task**: Implement tasks, ensuring code and documentation align with requirements (`requirements.md`), specifications (`technical-specs.md`, `architecture.md`), and `.windsurfrules`.
- **Document Changes**: Update relevant files with changes, following the existing format, and leverage Cascade’s automatic documentation generation where applicable.

## Documentation Updates

Documentation updates occur when:

1. Discovering new project patterns or insights.
2. After implementing significant changes.
3. When the user requests with **update documentation** (MUST review ALL files in `documentation/`).
4. When context needs clarification or existing documentation lacks clarity.

```mermaid
flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Analyze Existing Patterns]
        P3[Document Current State]
        P4[Clarify Next Steps]
        P5[Update .windsurfrules]
        
        P1 --> P2 --> P3 --> P4 --> P5
    end
    
    Start --> Process
```

- **Review ALL Files**: Use the Indexing Engine to examine every file in `documentation/` and `.windsurfrules` to ensure completeness and consistency.
- **Analyze Existing Patterns**: Identify the tone, structure, and style (e.g., user stories in `requirements.md`, diagrams in `architecture.md`) of current documentation.
- **Document Current State**: Update files to reflect changes, mimicking the existing pattern and improving clarity or organization, with suggestions reviewed by the developer.
- **Clarify Next Steps**: Ensure `work-in-progress.md` and `status.md` clearly outline future work in the established style.
- **Update .windsurfrules**: Modify `.windsurfrules` to capture new insights or patterns, aligning with the existing format.

**Note**: For **update documentation** requests, Cascade MUST review all files, even if some don’t require changes. Focus on `work-in-progress.md` and `status.md` for current state updates, ensuring improvements align with the existing documentation pattern.

## Project Intelligence (.windsurfrules)

The `.windsurfrules` file contains project-specific rules in Markdown format, providing instructions for Cascade to follow when generating code or assisting with tasks. These rules enhance Cascade’s effectiveness by codifying project patterns, preferences, and context, integrated with the Memories system for persistence (Windsurf AI Agentic Code Editor: Features, Setup, and Use Cases).

```mermaid
flowchart TD
    Start{Discover New Pattern}
    
    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .windsurfrules]
    end
    
    subgraph Apply [Usage]
        A1[Read .windsurfrules]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end
    
    Start --> Learn
    Learn --> Apply
```

### What to Capture

- Critical implementation paths (e.g., preferred file structures).
- User preferences (e.g., documentation style, update frequency).
- Project-specific patterns (e.g., naming conventions, testing approaches).
- Known challenges and solutions.
- Evolution of project decisions.
- Tool usage patterns.
- Documentation patterns (e.g., “`requirements.md` uses user stories; `architecture.md` includes Mermaid diagrams”).

### Rule File Format

- Rules are stored in a single `.windsurfrules` file in Markdown format, with sections for different rule types or scopes.
- Use a simple list or header-based structure, with optional metadata-like comments (e.g., `# Scope: documentation/**/*`).
- Reference other files with `@file` (e.g., `@documentation/architecture.md`) for additional context, aligning with community practices (r/Codeium on Reddit: Rules for the AI in Windsurf).
- Example format:

  ```markdown
  # Base Project Rules
  # Scope: **/*
  - Follow coding standards defined in @documentation/technical-specs.md
  - Use user story format for requirements in @documentation/requirements.md
  
  # Documentation Rules
  # Scope: documentation/**/*
  - Mimic existing Markdown style in @documentation/ for new files
  - Use Mermaid diagrams in @documentation/architecture.md for system design
  ```

- Unlike Cursor’s `.mdc` files, `.windsurfrules` does not use YAML metadata but supports scoping via comments or section headers.

### Documentation-Specific Rules

- Include insights about the preferred documentation style for requirements (`requirements.md`) and specifications (`technical-specs.md`, `architecture.md`).
- Document user feedback on documentation improvements (e.g., “prefer concise requirements”).
- Ensure rules reflect how to maintain consistency with the existing `documentation/` pattern and the requirements/specifications distinction.
- Example rule:

  ```markdown
  # Documentation Standards
  # Scope: documentation/**/*
  - Mimic existing Markdown style in @documentation/ for new files
  - Use Mermaid diagrams in @documentation/architecture.md for system design
  - Validate requirements in @documentation/requirements.md before updating specifications
  ```

### Management

- Create or edit `.windsurfrules` manually or via Windsurf’s UI (e.g., rule editor if available).
- Update rules when new patterns emerge, ensuring they align with the existing `.windsurfrules` structure.
- Store `.windsurfrules` in the repository for version control and team consistency.
- Use the Memories system to persist rules and context, ensuring Cascade retains project intelligence across sessions.

## Planning

When entering **Ask Mode**, Cascade will:

1. Deeply analyze the requested changes and existing code to map the full scope, using the Indexing Engine.
2. Read all `documentation/` files and `.windsurfrules` to understand the current pattern and context (requirements in `requirements.md`, specifications in `technical-specs.md`/`architecture.md`).
3. Ask 4-6 clarifying questions based on findings, ensuring alignment with the existing documentation style, requirements/specifications framing, and `.windsurfrules`.
4. Draft a comprehensive plan of action, including how documentation and `.windsurfrules` will be updated to match the existing pattern with improvements.
5. Present the plan for approval via chat or comments, ensuring documentation changes are clearly outlined.

In **Agent Mode**, Cascade will:

1. Implement the approved plan, ensuring all code and documentation changes align with the existing `documentation/` pattern, requirements/specifications, and `.windsurfrules`.
2. After each phase/step, report what was completed, the next steps, and remaining phases via chat or comments.
3. Update `documentation/` files (e.g., `work-in-progress.md`, `status.md`) and `.windsurfrules` to reflect changes, mimicking the existing style, leveraging automatic documentation generation, and suggesting improvements for developer review.
